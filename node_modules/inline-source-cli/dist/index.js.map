{"version":3,"sources":["../src/index.js"],"names":["argv","usage","help","boolean","alias","string","default","source","_","process","stdin","setEncoding","on","chunk","read","run","compress","rootpath","root","cwd","attribute","err","html","stderr","write","exit","out","writeFile","stdout"],"mappings":";;AAEA;;;;AACA;;;;AACA;;;;;;AAEA;;AAEA,IAAIA,OAAO,gBACTC,KADS,2DAETC,IAFS,GAGTC,OAHS,CAGD,UAHC,EAITC,KAJS,CAIH,GAJG,EAIE,UAJF,EAKTC,MALS,CAKF,WALE,EAMTC,OANS,CAMD,WANC,EAMY,QANZ,EAOTD,MAPS,CAOF,MAPE,EAQTD,KARS,CAQH,GARG,EAQE,MARF,EASTA,KATS,CASH,GATG,EASE,MATF,EAUTJ,IAVF;;AAYA,IAAIO,SAASP,KAAKQ,CAAL,CAAO,CAAP,CAAb;;AAEA;AACA,IAAID,WAAS,GAAT,IAAgB,CAACA,MAArB,EAA6B;AAC5BA,UAAS,EAAT;AACAE,SAAQC,KAAR,CAAcC,WAAd,CAA0B,MAA1B;AACAF,SAAQC,KAAR,CAAcE,EAAd,CAAiB,UAAjB,EAA6B,YAAM;AAClC,MAAIC,QAAQJ,QAAQC,KAAR,CAAcI,IAAd,EAAZ;AACA,MAAID,UAAQ,IAAZ,EAAkBN,UAAUM,KAAV;AAClB,EAHD;AAIAJ,SAAQC,KAAR,CAAcE,EAAd,CAAiB,KAAjB,EAAwB,YAAM;AAC7BG,MAAIR,MAAJ,EAAYP,IAAZ;AACA,EAFD;AAGA,CAVD,MAWK;AACJe,KAAIR,MAAJ,EAAYP,IAAZ;AACA;;AAED,SAASe,GAAT,CAAaR,MAAb,EAAqBP,IAArB,EAA2B;AAC1B,6BAAOO,MAAP,EAAe;AACdS,YAAUhB,KAAKgB,QADD;AAEdC,YAAUjB,KAAKkB,IAAL,IAAalB,KAAKiB,QAAlB,IAA8BR,QAAQU,GAAR,EAF1B;AAGdC,aAAWpB,KAAKoB;AAHF,EAAf,EAIG,UAACC,GAAD,EAAMC,IAAN,EAAe;AACjB,MAAID,GAAJ,EAAS;AACRZ,WAAQc,MAAR,CAAeC,KAAf,aAA+BH,GAA/B;AACA,UAAOZ,QAAQgB,IAAR,CAAa,CAAb,CAAP;AACA;;AAED,MAAIC,MAAM1B,KAAKQ,CAAL,CAAO,CAAP,CAAV;AACA,MAAIkB,GAAJ,EAAS;AACR,gBAAGC,SAAH,CAAaD,GAAb,EAAkBJ,IAAlB,EAAwB,eAAO;AAC9B,QAAID,GAAJ,EAAS;AACRZ,aAAQc,MAAR,CAAeC,KAAf,aAA+BH,GAA/B;AACA,YAAOZ,QAAQgB,IAAR,CAAa,CAAb,CAAP;AACA;;AAEDhB,YAAQc,MAAR,CAAeC,KAAf,iBAAmCE,GAAnC;AACAjB,YAAQgB,IAAR,CAAa,CAAb;AACA,IARD;AASA,GAVD,MAWK;AACJhB,WAAQmB,MAAR,CAAeJ,KAAf,CAAqBF,OAAO,IAA5B;AACAb,WAAQgB,IAAR,CAAa,CAAb;AACA;AACD,EA1BD;AA2BA","file":"index.js","sourcesContent":["\n\nimport inline from 'inline-source';\nimport yargs from 'yargs';\nimport fs from 'fs';\n\n// inline-source --compress false --root ./ in.html [out.html]\n\nlet argv = yargs\n\t.usage(`Usage: $0 [--compress] [--root cwd] in.html [out.html]`)\n\t.help()\n\t.boolean('compress')\n\t.alias('z', 'compress')\n\t.string('attribute')\n\t.default('attribute', 'inline')\n\t.string('root')\n\t.alias('d', 'root')\n\t.alias('h', 'help')\n\t.argv;\n\nlet source = argv._[0];\n\n// pass \"-\" to read from stdin\nif (source==='-' || !source) {\n\tsource = '';\n\tprocess.stdin.setEncoding('utf8');\n\tprocess.stdin.on('readable', () => {\n\t\tlet chunk = process.stdin.read();\n\t\tif (chunk!==null) source += chunk;\n\t});\n\tprocess.stdin.on('end', () => {\n\t\trun(source, argv);\n\t});\n}\nelse {\n\trun(source, argv);\n}\n\nfunction run(source, argv) {\n\tinline(source, {\n\t\tcompress: argv.compress,\n\t\trootpath: argv.root || argv.rootpath || process.cwd(),\n\t\tattribute: argv.attribute\n\t}, (err, html) => {\n\t\tif (err) {\n\t\t\tprocess.stderr.write(`Error: ${err}\\n`);\n\t\t\treturn process.exit(1);\n\t\t}\n\n\t\tlet out = argv._[1];\n\t\tif (out) {\n\t\t\tfs.writeFile(out, html, err => {\n\t\t\t\tif (err) {\n\t\t\t\t\tprocess.stderr.write(`Error: ${err}\\n`);\n\t\t\t\t\treturn process.exit(1);\n\t\t\t\t}\n\n\t\t\t\tprocess.stderr.write(`Written to ${out}\\n`);\n\t\t\t\tprocess.exit(0);\n\t\t\t});\n\t\t}\n\t\telse {\n\t\t\tprocess.stdout.write(html + '\\n');\n\t\t\tprocess.exit(0);\n\t\t}\n\t});\n}\n"]}